{
  "Comment": "Daily Oura Sleep Data Sync",
  "StartAt": "CheckMissingDates",
  "States": {
    "CheckMissingDates": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OuraCheckMissingLambda}",
        "Payload": {}
      },
      "ResultPath": "$.checkResult",
      "Next": "HasMissingDates",
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleCheckError"
        }
      ]
    },
    "HasMissingDates": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.checkResult.Payload.has_missing_dates",
          "BooleanEquals": true,
          "Next": "ProcessBatches"
        }
      ],
      "Default": "NoDataToSync"
    },
    "ProcessBatches": {
      "Type": "Map",
      "ItemsPath": "$.checkResult.Payload.batches",
      "MaxConcurrency": 2,
      "ResultPath": "$.batchResults",
      "Iterator": {
        "StartAt": "FetchBatchData",
        "States": {
          "FetchBatchData": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${OuraFetchLambda}",
              "Payload.$": "$"
            },
            "Next": "ProcessAndStoreBatch",
            "Retry": [
              {
                "ErrorEquals": ["OuraApiError", "States.TaskFailed"],
                "IntervalSeconds": 5,
                "MaxAttempts": 3,
                "BackoffRate": 2.0
              }
            ],
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "BatchFailed",
                "ResultPath": "$.error"
              }
            ]
          },
          "ProcessAndStoreBatch": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${OuraProcessAndStoreLambda}",
              "Payload.$": "$.Payload"
            },
            "Next": "BatchComplete",
            "Retry": [
              {
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2.0
              }
            ],
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "BatchFailed",
                "ResultPath": "$.error"
              }
            ]
          },
          "BatchComplete": {
            "Type": "Pass",
            "Result": {
              "status": "success"
            },
            "End": true
          },
          "BatchFailed": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${OuraLogErrorLambda}",
              "Payload": {
                "error_type": "batch_processing_error",
                "batch_info.$": "$",
                "error": "Error occurred during batch processing"
              }
            },
            "Next": "BatchFailedState"
          },
          "BatchFailedState": {
            "Type": "Pass",
            "Result": {
              "status": "failed"
            },
            "End": true
          }
        }
      },
      "Next": "SendSummary"
    },
    "SendSummary": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OuraSummaryLambda}",
        "Payload.$": "$"
      },
      "Next": "Success"
    },
    "NoDataToSync": {
      "Type": "Pass",
      "Result": {
        "message": "No missing dates found, all data is up to date"
      },
      "Next": "Success"
    },
    "HandleCheckError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OuraLogErrorLambda}",
        "Payload": {
          "error_type": "check_missing_error",
          "error.$": "$.Error"
        }
      },
      "Next": "CheckFailed"
    },
    "CheckFailed": {
      "Type": "Fail",
      "Cause": "Failed to check for missing dates"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}